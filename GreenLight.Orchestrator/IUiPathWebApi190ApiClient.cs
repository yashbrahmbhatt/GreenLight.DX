using OneOf;
using System.IO;
using System.Threading.Tasks;
namespace UiPathWebApi190
{
    public interface IUiPathWebApi190ApiClient
    {
        Task<List<GetsDirectoryPermissionsResponse>> GetsDirectoryPermissions(GetsDirectoryPermissionsParameters queryParameters);
        Task<List<GetsDomainsResponse>> GetsDomains();
        Task<EmptyResponse> RchestratorUserIdBySearchingForTheDomainUserInformation(RchestratorUserIdBySearchingForTheDomainUserInformationParameters queryParameters);
        Task<List<SearchUsersAndGroupsResponse>> SearchUsersAndGroups(SearchUsersAndGroupsParameters queryParameters);
        Task<Stream> RUserAssociationsexistInThisFolderOrAnyOfItsDescendants(RUserAssociationsexistInThisFolderOrAnyOfItsDescendantsParameters queryParameters);
        Task<HeCurrentUserHasAccessToTheResponseWillBeAListOfFoldersResponse> HeCurrentUserHasAccessToTheResponseWillBeAListOfFolders(HeCurrentUserHasAccessToTheResponseWillBeAListOfFoldersParameters queryParameters);
        Task<Stream> EditsAFolder(EditsAFolderParameters queryParameters, EditsAFolderRequest request);
        Task<List<RsTheUserHasactuallyBeenAssignedToTheFoldersWillBeMarkeResponse>> RsTheUserHasactuallyBeenAssignedToTheFoldersWillBeMarke();
        Task<HeDistinctionBetweenTheFoldersAssignedDirectlyToTheUserResponse> HeDistinctionBetweenTheFoldersAssignedDirectlyToTheUser(HeDistinctionBetweenTheFoldersAssignedDirectlyToTheUserParameters queryParameters);
        Task<DesignTheListOfAncestorsForTheGivenFolderIsAlsoReturnedResponse> DesignTheListOfAncestorsForTheGivenFolderIsAlsoReturned(DesignTheListOfAncestorsForTheGivenFolderIsAlsoReturnedParameters queryParameters);
        Task<RedSubsetPaginatedOfTheFoldersTheCurrentUserHasAccessToResponse> RedSubsetPaginatedOfTheFoldersTheCurrentUserHasAccessTo(RedSubsetPaginatedOfTheFoldersTheCurrentUserHasAccessToParameters queryParameters);
        Task<Stream> DeliverPayloadForTriggerInboxId(string inboxId);
        Task<OneOf<GetPayloadForTriggerInboxIdOKResponse, Stream>> GetPayloadForTriggerInboxId(string inboxId);
        Task<OneOf<AcquireLicenseUnitsOKResponse, Stream>> AcquireLicenseUnits(AcquireLicenseUnitsRequest request);
        Task<OneOf<ReleaseAcquiredLicenseUnitsOKResponse, Stream>> ReleaseAcquiredLicenseUnits(ReleaseAcquiredLicenseUnitsRequest request);
        Task<Stream> InsertsALogEntryWithASpecifiedMessageInJSONFormat(InsertsALogEntryWithASpecifiedMessageInJSONFormatRequest request);
        Task<Stream> InsertsACollectionOfLogEntriesEachInASpecificJSONFormat();
        Task<Stream> EndsAMaintenanceWindow(EndsAMaintenanceWindowParameters queryParameters);
        Task<GetsTheHostAdminLogsResponse> GetsTheHostAdminLogs(GetsTheHostAdminLogsParameters queryParameters);
        Task<Stream> StartsAMaintenanceWindow(StartsAMaintenanceWindowParameters queryParameters);
        Task<EmptyResponse> EturnsTheFeedIdForAUserAssignedFolderHavingSpecificFeed(EturnsTheFeedIdForAUserAssignedFolderHavingSpecificFeedParameters queryParameters);
        Task<Stream> ReleasesDeleteByKey(ReleasesDeleteByKeyParameters queryParameters);
        Task<List<GetsTheConsumptionLicensingUsageStatisticsResponse>> GetsTheConsumptionLicensingUsageStatistics(GetsTheConsumptionLicensingUsageStatisticsParameters queryParameters);
        Task<List<TheTotalNumberOfVariousEntitiesRegisteredInOrchestratorResponse>> TheTotalNumberOfVariousEntitiesRegisteredInOrchestrator();
        Task<List<GetsTheTotalNumberOfJobsAggregatedByJobStateResponse>> GetsTheTotalNumberOfJobsAggregatedByJobState();
        Task<List<GetsTheLicensingUsageStatisticsResponse>> GetsTheLicensingUsageStatistics(GetsTheLicensingUsageStatisticsParameters queryParameters);
        Task<List<GetsTheTotalNumberOfRobotsAggregatedByRobotStateResponse>> GetsTheTotalNumberOfRobotsAggregatedByRobotState();
        Task<Stream> ReturnsWhetherTheCurrentEndpointShouldBeServingTraffic();
        Task<StatusVerifyHostAvailibilityResponse> StatusVerifyHostAvailibility(StatusVerifyHostAvailibilityParameters queryParameters);
        Task<Stream> CancelsTheSpecifiedTestCaseExecution(CancelsTheSpecifiedTestCaseExecutionParameters queryParameters);
        Task<Stream> CancelsTheSpecifiedTestSetExecution(CancelsTheSpecifiedTestSetExecutionParameters queryParameters);
        Task<EmptyResponse> TypeAPIThisEndpointItIsSupposedToBeUsedByAPIIntegration(TypeAPIThisEndpointItIsSupposedToBeUsedByAPIIntegrationRequest request);
        Task<Stream> GetTheScreenshotForTheSpecifiedTestCaseAssertion(GetTheScreenshotForTheSpecifiedTestCaseAssertionParameters queryParameters);
        Task<AgeIdentifierAndTheLatestVersionForTheSpecifiedTestCaseResponse> AgeIdentifierAndTheLatestVersionForTheSpecifiedTestCase(AgeIdentifierAndTheLatestVersionForTheSpecifiedTestCaseParameters queryParameters);
        Task<List<RAndVersionCrossFolderWhenNoCurrentFolderIsSentByHeaderResponse>> RAndVersionCrossFolderWhenNoCurrentFolderIsSentByHeader(RAndVersionCrossFolderWhenNoCurrentFolderIsSentByHeaderParameters queryParameters);
        Task<Stream> TheAttachmentForTheSpecifiedTestCaseExecutionAttachment(TheAttachmentForTheSpecifiedTestCaseExecutionAttachmentParameters queryParameters);
        Task<List<TestCaseExecutionAttachmentsFilteredByIdentifierAndTagsResponse>> TestCaseExecutionAttachmentsFilteredByIdentifierAndTags(TestCaseExecutionAttachmentsFilteredByIdentifierAndTagsRequest request);
        Task<Stream> TTheAttachmentForTheSpecifiedTestSetExecutionAttachment(TTheAttachmentForTheSpecifiedTestSetExecutionAttachmentParameters queryParameters);
        Task<List<LTestSetExecutionAttachmentsFilteredByIdentifierAndTagsResponse>> LTestSetExecutionAttachmentsFilteredByIdentifierAndTags(LTestSetExecutionAttachmentsFilteredByIdentifierAndTagsRequest request);
        Task<List<PecifiedTestCaseExecutionsWithinTheSameTestSetExecutionResponse>> PecifiedTestCaseExecutionsWithinTheSameTestSetExecution(PecifiedTestCaseExecutionsWithinTheSameTestSetExecutionRequest request);
        Task<EmptyResponse> StartATestSetExecution(StartATestSetExecutionParameters queryParameters);
        Task<EmptyResponse> StartATestSetExecutionWithAdditionalOptions(StartATestSetExecutionWithAdditionalOptionsParameters queryParameters, StartATestSetExecutionWithAdditionalOptionsRequest request);
        Task<AddANewTestDataQueueItemResponse> AddANewTestDataQueueItem(AddANewTestDataQueueItemRequest request);
        Task<EmptyResponse> BulkAddsAnArrayOfDataQueueItems(BulkAddsAnArrayOfDataQueueItemsRequest request);
        Task<Stream> DeleteAllItemsFromATestDataQueue(DeleteAllItemsFromATestDataQueueParameters queryParameters);
        Task<Stream> DeleteSpecificTestDataQueueItems();
        Task<OneOf<GetTheNextUnconsumedTestDataQueueItemOKResponse, Stream>> GetTheNextUnconsumedTestDataQueueItem(GetTheNextUnconsumedTestDataQueueItemRequest request);
        Task<Stream> SetTheIsConsumedFlagForAllItemsFromATestDataQueue(SetTheIsConsumedFlagForAllItemsFromATestDataQueueRequest request);
        Task<Stream> SetTheIsConsumedFlagForSpecificTestDataQueueItems(SetTheIsConsumedFlagForSpecificTestDataQueueItemsRequest request);
        Task<ReturnsAJsonWithTranslationResourcesResponse> ReturnsAJsonWithTranslationResources(ReturnsAJsonWithTranslationResourcesParameters queryParameters);
        Task<OneOf<List<BulkCompleteTheTaskByMergingFormDataAndActionTakenOKResponse>, Stream>> BulkCompleteTheTaskByMergingFormDataAndActionTaken(BulkCompleteTheTaskByMergingFormDataAndActionTakenRequest request);
        Task<OneOf<List<BulkUpdateTaskDataByMergingDataOKResponse>, Stream>> BulkUpdateTaskDataByMergingData(BulkUpdateTaskDataByMergingDataRequest request);
        Task<Stream> CompleteTheTaskBySavingFormDataAndActionTaken(CompleteTheTaskBySavingFormDataAndActionTakenRequest request);
        Task<CreatesANewFormTaskResponse> CreatesANewFormTask(CreatesANewFormTaskRequest request);
        Task<OneOf<ReturnsTaskDataDtoOKResponse, Stream>> ReturnsTaskDataDto(ReturnsTaskDataDtoParameters queryParameters);
        Task<OneOf<ReturnsFormDtoToRenderTaskFormOKResponse, Stream>> ReturnsFormDtoToRenderTaskForm(ReturnsFormDtoToRenderTaskFormParameters queryParameters);
        Task<Stream> ChangesDoneByTheCurrentUserAndReassignTaskToAnotherUser(ChangesDoneByTheCurrentUserAndReassignTaskToAnotherUserRequest request);
        Task<Stream> SaveTaskData(SaveTaskDataRequest request);
        Task<GetsAlertsResponse> GetsAlerts(GetsAlertsParameters queryParameters);
        Task<MberOfAlertsPerTenantThatHaventBeenReadByTheCurrentUserResponse> MberOfAlertsPerTenantThatHaventBeenReadByTheCurrentUser(MberOfAlertsPerTenantThatHaventBeenReadByTheCurrentUserParameters queryParameters);
        Task<AsReadAndReturnsTheRemainingNumberOfUnreadNotificationsResponse> AsReadAndReturnsTheRemainingNumberOfUnreadNotifications(AsReadAndReturnsTheRemainingNumberOfUnreadNotificationsParameters queryParameters, AsReadAndReturnsTheRemainingNumberOfUnreadNotificationsRequest request);
        Task<Stream> CreatesAProcessAlert(CreatesAProcessAlertRequest request);
        Task<GetAssetsResponse> GetAssets(GetAssetsParameters queryParameters);
        Task<CreatesAnAssetResponse> CreatesAnAsset(CreatesAnAssetRequest request);
        Task<RentUserHasTheAssetsViewPermissionExceptTheOneSpecifiedResponse> RentUserHasTheAssetsViewPermissionExceptTheOneSpecified(RentUserHasTheAssetsViewPermissionExceptTheOneSpecifiedParameters queryParameters);
        Task<GetFilteredAssetsResponse> GetFilteredAssets(GetFilteredAssetsParameters queryParameters);
        Task<UntOfFoldersWhereItIsSharedIncludingUnaccessibleFoldersResponse> UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders(UntOfFoldersWhereItIsSharedIncludingUnaccessibleFoldersParameters queryParameters);
        Task<OneOf<ReturnsTheNamedAssetAssociatedToTheGivenRobotKeyOKResponse, Stream>> ReturnsTheNamedAssetAssociatedToTheGivenRobotKey(ReturnsTheNamedAssetAssociatedToTheGivenRobotKeyParameters queryParameters);
        Task<OneOf<ReturnsTheNamedAssetAssociatedToTheGivenRobotKey2OKResponse, Stream>> ReturnsTheNamedAssetAssociatedToTheGivenRobotKey2(ReturnsTheNamedAssetAssociatedToTheGivenRobotKey2Parameters queryParameters, ReturnsTheNamedAssetAssociatedToTheGivenRobotKey2Request request);
        Task<OneOf<ReturnsTheNamedAssetAssociatedToTheGivenRobotIdOKResponse, Stream>> ReturnsTheNamedAssetAssociatedToTheGivenRobotId(ReturnsTheNamedAssetAssociatedToTheGivenRobotIdParameters queryParameters);
        Task<Stream> SetTheAssetValueAssociatedToTheGivenRobotKey(SetTheAssetValueAssociatedToTheGivenRobotKeyRequest request);
        Task<Stream> OvesTheAssetsFromTheFoldersSpecifiedInToRemoveFolderIds(OvesTheAssetsFromTheFoldersSpecifiedInToRemoveFolderIdsRequest request);
        Task<GetsASingleAssetBasedOnItsIdResponse> GetsASingleAssetBasedOnItsId(GetsASingleAssetBasedOnItsIdParameters queryParameters);
        Task<Stream> EditAnAsset(EditAnAssetRequest request);
        Task<Stream> DeleteAnAsset();
        Task<GetsAuditLogsResponse> GetsAuditLogs(GetsAuditLogsParameters queryParameters);
        Task<RequestsACSVExportOfFilteredItemsResponse> RequestsACSVExportOfFilteredItems(RequestsACSVExportOfFilteredItemsParameters queryParameters);
        Task<ReturnsAuditLogDetailsByAuditLogIdResponse> ReturnsAuditLogDetailsByAuditLogId(ReturnsAuditLogDetailsByAuditLogIdParameters queryParameters);
        Task<CreatesAnBucketResponse> CreatesAnBucket(CreatesAnBucketRequest request);
        Task<GetsBucketsResponse> GetsBuckets(GetsBucketsParameters queryParameters);
        Task<EntUserHasTheBucketsViewPermissionExceptTheOneSpecifiedResponse> EntUserHasTheBucketsViewPermissionExceptTheOneSpecified(EntUserHasTheBucketsViewPermissionExceptTheOneSpecifiedParameters queryParameters);
        Task<UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders2Response> UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders2(UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders2Parameters queryParameters);
        Task<Stream> VesTheBucketsFromTheFoldersSpecifiedInToRemoveFolderIds(VesTheBucketsFromTheFoldersSpecifiedInToRemoveFolderIdsRequest request);
        Task<GetsASingleBucketResponse> GetsASingleBucket(GetsASingleBucketParameters queryParameters);
        Task<Stream> DeleteABucket();
        Task<UpdatesABucketResponse> UpdatesABucket(UpdatesABucketRequest request);
        Task<Stream> DeletesAFile(DeletesAFileParameters queryParameters);
        Task<GetsTheChildDirectoriesInADirectoryResponse> GetsTheChildDirectoriesInADirectory(GetsTheChildDirectoriesInADirectoryParameters queryParameters);
        Task<GetsAFileMetadataResponse> GetsAFileMetadata(GetsAFileMetadataParameters queryParameters);
        Task<OptionallyReturnsAllFilesInAllChildDirectoriesRecursiveResponse> OptionallyReturnsAllFilesInAllChildDirectoriesRecursive(OptionallyReturnsAllFilesInAllChildDirectoriesRecursiveParameters queryParameters);
        Task<GetsADirectDownloadURLForBlobFileResponse> GetsADirectDownloadURLForBlobFile(GetsADirectDownloadURLForBlobFileParameters queryParameters);
        Task<GetsADirectUploadURLForBlobFileResponse> GetsADirectUploadURLForBlobFile(GetsADirectUploadURLForBlobFileParameters queryParameters);
        Task<GetFilteredBusinessRulesResponse> GetFilteredBusinessRules(GetFilteredBusinessRulesParameters queryParameters);
        Task<CreateBusinessRuleResponse> CreateBusinessRule(CreateBusinessRuleMultipartFormData formData);
        Task<RHasTheBusinessRulesViewPermissionExceptTheOneSpecifiedResponse> RHasTheBusinessRulesViewPermissionExceptTheOneSpecified(RHasTheBusinessRulesViewPermissionExceptTheOneSpecifiedParameters queryParameters);
        Task<UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders3Response> UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders3(UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders3Parameters queryParameters);
        Task<OneOf<GetReadURIByNameOKResponse, Stream>> GetReadURIByName(GetReadURIByNameParameters queryParameters);
        Task<OneOf<GetVersionsOfBusinessRuleOKResponse, Stream>> GetVersionsOfBusinessRule(GetVersionsOfBusinessRuleParameters queryParameters);
        Task<Stream> MakesTheBusinessRuleVisibleInTheSpecifiedFolders(MakesTheBusinessRuleVisibleInTheSpecifiedFoldersRequest request);
        Task<OneOf<GetBusinessRuleByKeyOKResponse, Stream>> GetBusinessRuleByKey(GetBusinessRuleByKeyParameters queryParameters);
        Task<Stream> UpdateBusinessRule(UpdateBusinessRuleMultipartFormData formData);
        Task<Stream> DeleteBusinessRule();
        Task<GetsCalendarsForCurrentTenantResponse> GetsCalendarsForCurrentTenant(GetsCalendarsForCurrentTenantParameters queryParameters);
        Task<CreatesANewCalendarResponse> CreatesANewCalendar(CreatesANewCalendarRequest request);
        Task<ValidateCalendarNameAndCheckIfItAlreadyExistsResponse> ValidateCalendarNameAndCheckIfItAlreadyExists(ValidateCalendarNameAndCheckIfItAlreadyExistsParameters queryParameters, ValidateCalendarNameAndCheckIfItAlreadyExistsRequest request);
        Task<GetsCalendarBasedOnItsIdResponse> GetsCalendarBasedOnItsId(GetsCalendarBasedOnItsIdParameters queryParameters);
        Task<EditsACalendarResponse> EditsACalendar(EditsACalendarRequest request);
        Task<Stream> DeletesACalendar();
        Task<GetsAllCredentialStoresResponse> GetsAllCredentialStores(GetsAllCredentialStoresParameters queryParameters);
        Task<CreatesANewCredentialStoreResponse> CreatesANewCredentialStore(CreatesANewCredentialStoreRequest request);
        Task<GetsAvailableCredentialStoreTypesResponse> GetsAvailableCredentialStoreTypes(GetsAvailableCredentialStoreTypesParameters queryParameters);
        Task<GetTheDefaultCredentialStoreForTheGivenResourceTypeResponse> GetTheDefaultCredentialStoreForTheGivenResourceType(GetTheDefaultCredentialStoreForTheGivenResourceTypeParameters queryParameters);
        Task<AilableResourcesRobotsAndLaterAssetsForACredentialStoreResponse> AilableResourcesRobotsAndLaterAssetsForACredentialStore(AilableResourcesRobotsAndLaterAssetsForACredentialStoreParameters queryParameters);
        Task<AilableResourcesRobotsAndLaterAssetsForACredentialStore2Response> AilableResourcesRobotsAndLaterAssetsForACredentialStore2(AilableResourcesRobotsAndLaterAssetsForACredentialStore2Parameters queryParameters);
        Task<GetsASingleCredentialStoreByItsKeyResponse> GetsASingleCredentialStoreByItsKey(GetsASingleCredentialStoreByItsKeyParameters queryParameters);
        Task<Stream> UpdatesACredentialStore(UpdatesACredentialStoreRequest request);
        Task<Stream> DeletesACredentialStore(DeletesACredentialStoreParameters queryParameters);
        Task<Stream> TsACredentialStoreAsTheDefaultForTheGivenCredentialType(TsACredentialStoreAsTheDefaultForTheGivenCredentialTypeRequest request);
        Task<GetsEnvironmentsResponse> GetsEnvironments(GetsEnvironmentsParameters queryParameters);
        Task<PostNewEnvironmentResponse> PostNewEnvironment(PostNewEnvironmentRequest request);
        Task<FTheRobotsAssociatedToAnEnvironmentBasedOnEnvironmentIdResponse> FTheRobotsAssociatedToAnEnvironmentBasedOnEnvironmentId(FTheRobotsAssociatedToAnEnvironmentBasedOnEnvironmentIdParameters queryParameters);
        Task<StThoseBelongingToTheEnvironmentAllowsOdataQueryOptionsResponse> StThoseBelongingToTheEnvironmentAllowsOdataQueryOptions(StThoseBelongingToTheEnvironmentAllowsOdataQueryOptionsParameters queryParameters);
        Task<GetsASingleEnvironmentResponse> GetsASingleEnvironment(GetsASingleEnvironmentParameters queryParameters);
        Task<Stream> UpdatesAnEnvironment(UpdatesAnEnvironmentRequest request);
        Task<Stream> DeletesAnEnvironment();
        Task<Stream> AssociatesARobotWithTheGivenEnvironment(AssociatesARobotWithTheGivenEnvironmentRequest request);
        Task<Stream> DissociatesARobotFromTheGivenEnvironment(DissociatesARobotFromTheGivenEnvironmentRequest request);
        Task<Stream> DDissociatesAnotherGroupOfRobotsFromTheGivenEnvironment(DDissociatesAnotherGroupOfRobotsFromTheGivenEnvironmentRequest request);
        Task<ExecutionMediaGetResponse> ExecutionMediaGet(ExecutionMediaGetParameters queryParameters);
        Task<Stream> DeletesTheExecutionMediaForTheGivenJobKey(DeletesTheExecutionMediaForTheGivenJobKeyRequest request);
        Task<Stream> DownloadsExecutionMediaByJobId();
        Task<GetByIdResponse> GetById(GetByIdParameters queryParameters);
        Task<ExportsGetByIdResponse> ExportsGetById(ExportsGetByIdParameters queryParameters);
        Task<ExportsGetDownloadLinkByIdResponse> ExportsGetDownloadLinkById(ExportsGetDownloadLinkByIdParameters queryParameters);
        Task<GetsFoldersResponse> GetsFolders(GetsFoldersParameters queryParameters);
        Task<CreatesANewFolderResponse> CreatesANewFolder(CreatesANewFolderRequest request);
        Task<Stream> OrGroupToASetOfFoldersWithAnOptionalSetOfRolesPerFolder(OrGroupToASetOfFoldersWithAnOptionalSetOfRolesPerFolderRequest request);
        Task<Stream> AssignsOneOrMoreMachinesToASetOfFolders(AssignsOneOrMoreMachinesToASetOfFoldersRequest request);
        Task<Stream> ReUsersToASetOfFoldersWithAnOptionalSetOfRolesPerFolder(ReUsersToASetOfFoldersWithAnOptionalSetOfRolesPerFolderRequest request);
        Task<HeDistinctionBetweenTheFoldersAssignedDirectlyToTheUser2Response> HeDistinctionBetweenTheFoldersAssignedDirectlyToTheUser2(HeDistinctionBetweenTheFoldersAssignedDirectlyToTheUser2Parameters queryParameters);
        Task<GetsASingleFolderBasedOnItsKeyResponse> GetsASingleFolderBasedOnItsKey(GetsASingleFolderBasedOnItsKeyParameters queryParameters);
        Task<ReturnsTheMachinesAssignedToAFolderResponse> ReturnsTheMachinesAssignedToAFolder(ReturnsTheMachinesAssignedToAFolderParameters queryParameters);
        Task<GetsTheMachineChangesWhenMovingAFolderResponse> GetsTheMachineChangesWhenMovingAFolder(GetsTheMachineChangesWhenMovingAFolderParameters queryParameters);
        Task<CtMachineAssignmentsForAllSubfoldersOfTheSpecificFolderResponse> CtMachineAssignmentsForAllSubfoldersOfTheSpecificFolder(CtMachineAssignmentsForAllSubfoldersOfTheSpecificFolderParameters queryParameters);
        Task<RAndOptionallyTheFineGrainedRolesEachOnehasOnThatFolderResponse> RAndOptionallyTheFineGrainedRolesEachOnehasOnThatFolder(RAndOptionallyTheFineGrainedRolesEachOnehasOnThatFolderParameters queryParameters);
        Task<Stream> ToggleMachinePropagationForAFolderToAllSubfolders(ToggleMachinePropagationForAFolderToAllSubfoldersRequest request);
        Task<Stream> AddAndRemoveMachineAssociationsToAFolder(AddAndRemoveMachineAssociationsToAFolderRequest request);
        Task<Stream> MoveAFolder(MoveAFolderParameters queryParameters);
        Task<GetsASingleFolderBasedOnItsIdResponse> GetsASingleFolderBasedOnItsId(GetsASingleFolderBasedOnItsIdParameters queryParameters);
        Task<EditsAFolder2Response> EditsAFolder2(EditsAFolder2Request request);
        Task<Stream> RUserAssociationsexistInThisFolderOrAnyOfItsDescendants2();
        Task<Stream> RemoveUserAssignmentFromAFolder(RemoveUserAssignmentFromAFolderRequest request);
        Task<Stream> RemoveUserAssignmentFromAFolder2(RemoveUserAssignmentFromAFolder2Request request);
        Task<Stream> RemoveUserAssignmentFromAFolder3(RemoveUserAssignmentFromAFolder3Request request);
        Task<GetsJobsResponse> GetsJobs(GetsJobsParameters queryParameters);
        Task<RequestsACSVExportOfFilteredItems2Response> RequestsACSVExportOfFilteredItems2(RequestsACSVExportOfFilteredItems2Parameters queryParameters);
        Task<RestartsTheSpecifiedJobResponse> RestartsTheSpecifiedJob(RestartsTheSpecifiedJobParameters queryParameters, RestartsTheSpecifiedJobRequest request);
        Task<ResumesTheSpecifiedJobResponse> ResumesTheSpecifiedJob(ResumesTheSpecifiedJobParameters queryParameters, ResumesTheSpecifiedJobRequest request);
        Task<AmetersAndNotifiesTheRespectiveRobotsAboutThePendingJobResponse> AmetersAndNotifiesTheRespectiveRobotsAboutThePendingJob(AmetersAndNotifiesTheRespectiveRobotsAboutThePendingJobParameters queryParameters, AmetersAndNotifiesTheRespectiveRobotsAboutThePendingJobRequest request);
        Task<Stream> CancelsOrTerminatesTheSpecifiedJobs(CancelsOrTerminatesTheSpecifiedJobsRequest request);
        Task<ValidatesTheInputWhichWouldStartAJobResponse> ValidatesTheInputWhichWouldStartAJob(ValidatesTheInputWhichWouldStartAJobParameters queryParameters, ValidatesTheInputWhichWouldStartAJobRequest request);
        Task<GetsASingleJobResponse> GetsASingleJob(GetsASingleJobParameters queryParameters);
        Task<Stream> CancelsOrTerminatesTheSpecifiedJob(CancelsOrTerminatesTheSpecifiedJobRequest request);
        Task<ValidatesAnExistingJobResponse> ValidatesAnExistingJob(ValidatesAnExistingJobParameters queryParameters);
        Task<GetsJobTriggersResponse> GetsJobTriggers(GetsJobTriggersParameters queryParameters);
        Task<TsTriggerOptionForAJobInstanceAlongWithWaitEventDetailsResponse> TsTriggerOptionForAJobInstanceAlongWithWaitEventDetails(TsTriggerOptionForAJobInstanceAlongWithWaitEventDetailsParameters queryParameters);
        Task<GetsTheLibraryPackagesResponse> GetsTheLibraryPackages(GetsTheLibraryPackagesParameters queryParameters);
        Task<Stream> DownloadsTheNupkgFileOfAPackage(DownloadsTheNupkgFileOfAPackageParameters queryParameters);
        Task<AvailableVersionsOfAGivenPackageAllowsOdataQueryOptionsResponse> AvailableVersionsOfAGivenPackageAllowsOdataQueryOptions(AvailableVersionsOfAGivenPackageAllowsOdataQueryOptionsParameters queryParameters);
        Task<TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequestResponse> TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequest(TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequestParameters queryParameters, TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequestMultipartFormData formData);
        Task<Stream> DeletesAPackage(DeletesAPackageParameters queryParameters);
        Task<GetsNamedUserLicensesResponse> GetsNamedUserLicenses(GetsNamedUserLicensesParameters queryParameters);
        Task<Stream> TogglesMachineLicensingOnoff(TogglesMachineLicensingOnoffRequest request);
        Task<GetsRuntimeLicensesResponse> GetsRuntimeLicenses(GetsRuntimeLicensesParameters queryParameters);
        Task<GetsMachinesResponse> GetsMachines(GetsMachinesParameters queryParameters);
        Task<CreatesANewMachineResponse> CreatesANewMachine(CreatesANewMachineRequest request);
        Task<Stream> DeletesMultipleMachinesBasedOnTheirKeys(DeletesMultipleMachinesBasedOnTheirKeysRequest request);
        Task<GetsMachinesAssignedToFolderAndRobotResponse> GetsMachinesAssignedToFolderAndRobot(GetsMachinesAssignedToFolderAndRobotParameters queryParameters);
        Task<GetsRuntimesForTheSpecifiedFolderResponse> GetsRuntimesForTheSpecifiedFolder(GetsRuntimesForTheSpecifiedFolderParameters queryParameters);
        Task<GetsASingleMachineBasedOnItsIdResponse> GetsASingleMachineBasedOnItsId(GetsASingleMachineBasedOnItsIdParameters queryParameters);
        Task<Stream> EditsAMachineBasedOnItsKey(EditsAMachineBasedOnItsKeyRequest request);
        Task<Stream> PartiallyUpdatesAMachine(PartiallyUpdatesAMachineRequest request);
        Task<Stream> DeletesAMachineBasedOnItsKey();
        Task<GetsTheOrganizationUnitsResponse> GetsTheOrganizationUnits(GetsTheOrganizationUnitsParameters queryParameters);
        Task<OneOf<CreatesAnOrganizationUnitOKResponse, CreatesAnOrganizationUnitCreatedResponse>> CreatesAnOrganizationUnit(CreatesAnOrganizationUnitRequest request);
        Task<IonOfAllTheIdsOfTheUsersAssociatedToAnUnitBasedOnUnitIdResponse> IonOfAllTheIdsOfTheUsersAssociatedToAnUnitBasedOnUnitId(IonOfAllTheIdsOfTheUsersAssociatedToAnUnitBasedOnUnitIdParameters queryParameters);
        Task<LaceFirstThoseAssociatedToAnUnitAllowsOdataQueryOptionsResponse> LaceFirstThoseAssociatedToAnUnitAllowsOdataQueryOptions(LaceFirstThoseAssociatedToAnUnitAllowsOdataQueryOptionsParameters queryParameters);
        Task<GetsAnOrganizationUnitResponse> GetsAnOrganizationUnit(GetsAnOrganizationUnitParameters queryParameters);
        Task<Stream> EditsAnOrganizationUnit(EditsAnOrganizationUnitRequest request);
        Task<Stream> DeletesAnOrganizationUnit();
        Task<Stream> RsWithAndDissociatesAnotherGroupOfUsersFromTheGivenUnit(RsWithAndDissociatesAnotherGroupOfUsersFromTheGivenUnitRequest request);
        Task<GetsPermissionsResponse> GetsPermissions(GetsPermissionsParameters queryParameters);
        Task<GetsPersonalWorkspacesResponse> GetsPersonalWorkspaces(GetsPersonalWorkspacesParameters queryParameters);
        Task<OneOf<GetsPersonalWorkspaceForCurrentUserOKResponse, Stream>> GetsPersonalWorkspaceForCurrentUser(GetsPersonalWorkspaceForCurrentUserParameters queryParameters);
        Task<Stream> ConvertsAPersonalWorkspaceToAStandardFolder(ConvertsAPersonalWorkspaceToAStandardFolderRequest request);
        Task<Stream> AssignsTheCurrentUserToExploreAPersonalWorkspace();
        Task<Stream> UnassignsTheCurrentUserFromExploringAPersonalWorkspace();
        Task<GetsTheProcessesResponse> GetsTheProcesses(GetsTheProcessesParameters queryParameters);
        Task<Stream> DownloadsTheNupkgFileOfAPackage2(DownloadsTheNupkgFileOfAPackage2Parameters queryParameters);
        Task<GetProcessParametersResponse> GetProcessParameters(GetProcessParametersParameters queryParameters);
        Task<AvailableVersionsOfAGivenProcessAllowsOdataQueryOptionsResponse> AvailableVersionsOfAGivenProcessAllowsOdataQueryOptions(AvailableVersionsOfAGivenProcessAllowsOdataQueryOptionsParameters queryParameters);
        Task<OneOf<TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequest2OKResponse, TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequest2MultiStatusResponse>> TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequest2(TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequest2Parameters queryParameters, TOfThePackageIsSentAsANupkgFileEmbeddedInTheHTTPRequest2MultipartFormData formData);
        Task<Stream> DeletesAPackage2(DeletesAPackage2Parameters queryParameters);
        Task<GetsTheProcessSchedulesResponse> GetsTheProcessSchedules(GetsTheProcessSchedulesParameters queryParameters);
        Task<CreatesANewProcessScheduleResponse> CreatesANewProcessSchedule(CreatesANewProcessScheduleRequest request);
        Task<HeIdsOfTheRobotsAssociatedToAnScheduleBasedOnScheduleIdResponse> HeIdsOfTheRobotsAssociatedToAnScheduleBasedOnScheduleId(HeIdsOfTheRobotsAssociatedToAnScheduleBasedOnScheduleIdParameters queryParameters);
        Task<OneOf<EnablesdisablesAGroupOfSchedulesOKResponse, EnablesdisablesAGroupOfSchedulesMultiStatusResponse, EnablesdisablesAGroupOfSchedulesBadRequestResponse, EnablesdisablesAGroupOfSchedulesNotFoundResponse>> EnablesdisablesAGroupOfSchedules(EnablesdisablesAGroupOfSchedulesParameters queryParameters, EnablesdisablesAGroupOfSchedulesRequest request);
        Task<LidatesTheInputWhichWouldBeUsedToCreateAProcessScheduleResponse> LidatesTheInputWhichWouldBeUsedToCreateAProcessSchedule(LidatesTheInputWhichWouldBeUsedToCreateAProcessScheduleParameters queryParameters, LidatesTheInputWhichWouldBeUsedToCreateAProcessScheduleRequest request);
        Task<OneOf<GetsASingleProcessScheduleBasedOnItsKeyOKResponse, Stream>> GetsASingleProcessScheduleBasedOnItsKey(GetsASingleProcessScheduleBasedOnItsKeyParameters queryParameters);
        Task<Stream> EditsAProcessSchedule(EditsAProcessScheduleRequest request);
        Task<Stream> DeletesAProcessSchedule();
        Task<Stream> ActivatesAProcessScheduleAssociatedWithAQueue();
        Task<GetsTheListOfQueueDefinitionsResponse> GetsTheListOfQueueDefinitions(GetsTheListOfQueueDefinitionsParameters queryParameters);
        Task<CreatesANewQueueResponse> CreatesANewQueue(CreatesANewQueueRequest request);
        Task<UntOfFoldersWhereItIsSharedIncludingInaccessibleFoldersResponse> UntOfFoldersWhereItIsSharedIncludingInaccessibleFolders(UntOfFoldersWhereItIsSharedIncludingInaccessibleFoldersParameters queryParameters);
        Task<TheQueuesViewPermissionExceptTheOnesInTheExcludedFolderResponse> TheQueuesViewPermissionExceptTheOnesInTheExcludedFolder(TheQueuesViewPermissionExceptTheOnesInTheExcludedFolderParameters queryParameters);
        Task<Stream> MakesTheQueueVisibleInTheSpecifiedFolders(MakesTheQueueVisibleInTheSpecifiedFoldersRequest request);
        Task<GetsASingleQueueDefinitionBasedOnItsIdResponse> GetsASingleQueueDefinitionBasedOnItsId(GetsASingleQueueDefinitionBasedOnItsIdParameters queryParameters);
        Task<Stream> EditsAQueue(EditsAQueueRequest request);
        Task<Stream> DeletesAQueueBasedOnItsKey();
        Task<RequestsACSVExportOfFilteredItems3Response> RequestsACSVExportOfFilteredItems3(RequestsACSVExportOfFilteredItems3Parameters queryParameters);
        Task<Stream> NQueueItemJSONSchemaAsAJsonFileBasedOnQueueDefinitionId();
        Task<GetsTheQueueItemCommentsResponse> GetsTheQueueItemComments(GetsTheQueueItemCommentsParameters queryParameters);
        Task<CreatesAQueueItemCommentResponse> CreatesAQueueItemComment(CreatesAQueueItemCommentRequest request);
        Task<ReatedAsARetryOfAFailedQueueItemTheyAlsoShareTheSameKeyResponse> ReatedAsARetryOfAFailedQueueItemTheyAlsoShareTheSameKey(ReatedAsARetryOfAFailedQueueItemTheyAlsoShareTheSameKeyParameters queryParameters);
        Task<GetsAQueueItemCommentByIdResponse> GetsAQueueItemCommentById(GetsAQueueItemCommentByIdParameters queryParameters);
        Task<Stream> UpdatesAQueueItemComment(UpdatesAQueueItemCommentRequest request);
        Task<Stream> DeletesAQueueItemComment();
        Task<GetsTheQueueItemEventsResponse> GetsTheQueueItemEvents(GetsTheQueueItemEventsParameters queryParameters);
        Task<ReatedAsARetryOfAFailedQueueItemTheyAlsoShareTheSameKey2Response> ReatedAsARetryOfAFailedQueueItemTheyAlsoShareTheSameKey2(ReatedAsARetryOfAFailedQueueItemTheyAlsoShareTheSameKey2Parameters queryParameters);
        Task<GetsAQueueItemEventByIdResponse> GetsAQueueItemEventById(GetsAQueueItemEventByIdParameters queryParameters);
        Task<GetsACollectionOfQueueItemsResponse> GetsACollectionOfQueueItems(GetsACollectionOfQueueItemsParameters queryParameters);
        Task<ThePermissionForQueueItemsReviewAllowsOdataQueryOptionsResponse> ThePermissionForQueueItemsReviewAllowsOdataQueryOptions(ThePermissionForQueueItemsReviewAllowsOdataQueryOptionsParameters queryParameters);
        Task<SetsTheGivenQueueItemsStatusToDeletedResponse> SetsTheGivenQueueItemsStatusToDeleted(SetsTheGivenQueueItemsStatusToDeletedParameters queryParameters, SetsTheGivenQueueItemsStatusToDeletedRequest request);
        Task<OneOf<ReturnsTheLastRetryOfAQueueItemByUniqueKeyOKResponse, Stream>> ReturnsTheLastRetryOfAQueueItemByUniqueKey(ReturnsTheLastRetryOfAQueueItemByUniqueKeyParameters queryParameters);
        Task<SetsTheReviewerForMultipleQueueItemsResponse> SetsTheReviewerForMultipleQueueItems(SetsTheReviewerForMultipleQueueItemsParameters queryParameters, SetsTheReviewerForMultipleQueueItemsRequest request);
        Task<EReviewStatusOfTheSpecifiedQueueItemsToAnIndicatedStateResponse> EReviewStatusOfTheSpecifiedQueueItemsToAnIndicatedState(EReviewStatusOfTheSpecifiedQueueItemsToAnIndicatedStateParameters queryParameters, EReviewStatusOfTheSpecifiedQueueItemsToAnIndicatedStateRequest request);
        Task<UnsetsTheReviewerForMultipleQueueItemsResponse> UnsetsTheReviewerForMultipleQueueItems(UnsetsTheReviewerForMultipleQueueItemsParameters queryParameters, UnsetsTheReviewerForMultipleQueueItemsRequest request);
        Task<GetsAQueueItemByIdResponse> GetsAQueueItemById(GetsAQueueItemByIdParameters queryParameters);
        Task<Stream> DeletesAQueueItemById();
        Task<Stream> UpdatesTheQueueItemPropertiesWithTheNewValuesProvided(UpdatesTheQueueItemPropertiesWithTheNewValuesProvidedRequest request);
        Task<OneOf<ReturnsTheLastRetryOfAQueueItemOKResponse, Stream>> ReturnsTheLastRetryOfAQueueItem(ReturnsTheLastRetryOfAQueueItemParameters queryParameters);
        Task<EssingHistoryOfTheGivenQueueItemAllowsOdataQueryOptionsResponse> EssingHistoryOfTheGivenQueueItemAllowsOdataQueryOptions(EssingHistoryOfTheGivenQueueItemAllowsOdataQueryOptionsParameters queryParameters);
        Task<Stream> AtesTheProgressFieldOfAQueueItemWithTheStatusInProgress(AtesTheProgressFieldOfAQueueItemWithTheStatusInProgressRequest request);
        Task<TedProcessingStatusForAGivenQueueInTheLastSpecifiedDaysResponse> TedProcessingStatusForAGivenQueueInTheLastSpecifiedDays(TedProcessingStatusForAGivenQueueInTheLastSpecifiedDaysParameters queryParameters);
        Task<STheProcessingStatusForAllQueuesAllowsOdataQueryOptionsResponse> STheProcessingStatusForAllQueuesAllowsOdataQueryOptions(STheProcessingStatusForAllQueuesAllowsOdataQueryOptionsParameters queryParameters);
        Task<QueueRetentionGetResponse> QueueRetentionGet(QueueRetentionGetParameters queryParameters);
        Task<QueueRetentionGetByIdResponse> QueueRetentionGetById(QueueRetentionGetByIdParameters queryParameters);
        Task<Stream> QueueRetentionPutById(QueueRetentionPutByIdRequest request);
        Task<Stream> QueueRetentionDeleteById();
        Task<Stream> SetsTheResultOfATransaction(SetsTheResultOfATransactionRequest request);
        Task<AddsANewQueueItemResponse> AddsANewQueueItem(AddsANewQueueItemParameters queryParameters, AddsANewQueueItemRequest request);
        Task<BulkAddsQueueItemsResponse> BulkAddsQueueItems(BulkAddsQueueItemsParameters queryParameters, BulkAddsQueueItemsRequest request);
        Task<OneOf<StartsATransactionOKResponse, Stream>> StartsATransaction(StartsATransactionParameters queryParameters, StartsATransactionRequest request);
        Task<ReleaseRetentionGetResponse> ReleaseRetentionGet(ReleaseRetentionGetParameters queryParameters);
        Task<ReleaseRetentionGetByIdResponse> ReleaseRetentionGetById(ReleaseRetentionGetByIdParameters queryParameters);
        Task<Stream> ReleaseRetentionPutById(ReleaseRetentionPutByIdRequest request);
        Task<Stream> ReleaseRetentionDeleteById();
        Task<GetsMultipleReleasesResponse> GetsMultipleReleases(GetsMultipleReleasesParameters queryParameters);
        Task<OneOf<CreatesANewReleaseCreatedResponse, Stream>> CreatesANewRelease(CreatesANewReleaseRequest request);
        Task<Stream> UpdatesThePackageEntryPointForTheGivenRelease(UpdatesThePackageEntryPointForTheGivenReleaseRequest request);
        Task<EPackageVersionsForTheGivenReleasesToTheLatestAvailableResponse> EPackageVersionsForTheGivenReleasesToTheLatestAvailable(EPackageVersionsForTheGivenReleasesToTheLatestAvailableParameters queryParameters, EPackageVersionsForTheGivenReleasesToTheLatestAvailableRequest request);
        Task<GetsAReleaseByIdResponse> GetsAReleaseById(GetsAReleaseByIdParameters queryParameters);
        Task<Stream> PartiallyUpdatesARelease(PartiallyUpdatesAReleaseRequest request);
        Task<Stream> EditsARelease(EditsAReleaseRequest request);
        Task<Stream> DeletesARelease();
        Task<TheGivenReleaseToTheLastVersionItHadBeforeTheCurrentOneResponse> TheGivenReleaseToTheLastVersionItHadBeforeTheCurrentOne(TheGivenReleaseToTheLastVersionItHadBeforeTheCurrentOneParameters queryParameters);
        Task<ThePackageVersionForTheGivenReleaseToTheLatestAvailableResponse> ThePackageVersionForTheGivenReleaseToTheLatestAvailable(ThePackageVersionForTheGivenReleaseToTheLatestAvailableParameters queryParameters);
        Task<UpdatesThePackageVersionForTheGivenReleaseResponse> UpdatesThePackageVersionForTheGivenRelease(UpdatesThePackageVersionForTheGivenReleaseParameters queryParameters, UpdatesThePackageVersionForTheGivenReleaseRequest request);
        Task<GetsTheRobotLogsResponse> GetsTheRobotLogs(GetsTheRobotLogsParameters queryParameters);
        Task<RequestsACSVExportOfFilteredItems4Response> RequestsACSVExportOfFilteredItems4(RequestsACSVExportOfFilteredItems4Parameters queryParameters);
        Task<EdByTheMaxResultWindowParameterForAnElasticsearchSourceResponse> EdByTheMaxResultWindowParameterForAnElasticsearchSource(EdByTheMaxResultWindowParameterForAnElasticsearchSourceParameters queryParameters);
        Task<GetsRobotsResponse> GetsRobots(GetsRobotsParameters queryParameters);
        Task<CreatesANewRobotResponse> CreatesANewRobot(CreatesANewRobotRequest request);
        Task<Stream> ConvertAStandardAttendedRobotToAFloatingRobot(ConvertAStandardAttendedRobotToAFloatingRobotRequest request);
        Task<Stream> DeletesMultipleRobotsBasedOnTheirKeys(DeletesMultipleRobotsBasedOnTheirKeysRequest request);
        Task<GetRobotsAcrossAllAccessibleFoldersResponse> GetRobotsAcrossAllAccessibleFolders(GetRobotsAcrossAllAccessibleFoldersParameters queryParameters);
        Task<GetsRobotsAutoprovisionedFromUsersResponse> GetsRobotsAutoprovisionedFromUsers(GetsRobotsAutoprovisionedFromUsersParameters queryParameters);
        Task<GetFolderRobotsResponse> GetFolderRobots(GetFolderRobotsParameters queryParameters);
        Task<GetsMachineNameToLicenseKeyMappingResponse> GetsMachineNameToLicenseKeyMapping(GetsMachineNameToLicenseKeyMappingParameters queryParameters);
        Task<IonOfAllRobotsThatCanExecuteTheProcessWithTheProvidedIdResponse> IonOfAllRobotsThatCanExecuteTheProcessWithTheProvidedId(IonOfAllRobotsThatCanExecuteTheProcessWithTheProvidedIdParameters queryParameters);
        Task<GetsAllRobotsFromAFolderResponse> GetsAllRobotsFromAFolder(GetsAllRobotsFromAFolderParameters queryParameters);
        Task<GetsUsernamesResponse> GetsUsernames(GetsUsernamesParameters queryParameters);
        Task<Stream> TogglesTheStatusOfTheRobotsEnableddisabled(TogglesTheStatusOfTheRobotsEnableddisabledRequest request);
        Task<GetsASingleRobotBasedOnItsKeyResponse> GetsASingleRobotBasedOnItsKey(GetsASingleRobotBasedOnItsKeyParameters queryParameters);
        Task<Stream> EditsARobotBasedOnItsKey(EditsARobotBasedOnItsKeyRequest request);
        Task<Stream> PartiallyUpdatesARobot(PartiallyUpdatesARobotRequest request);
        Task<Stream> DeletesARobotBasedOnItsKey();
        Task<GetsRolesResponse> GetsRoles(GetsRolesParameters queryParameters);
        Task<EatesANewRoleCreatingMixedRolesWillNotBeSupportedIn2110Response> EatesANewRoleCreatingMixedRolesWillNotBeSupportedIn2110(EatesANewRoleCreatingMixedRolesWillNotBeSupportedIn2110Request request);
        Task<TionOfAllTheIdsOfTheUsersAssociatedToARoleBasedOnRoleIdResponse> TionOfAllTheIdsOfTheUsersAssociatedToARoleBasedOnRoleId(TionOfAllTheIdsOfTheUsersAssociatedToARoleBasedOnRoleIdParameters queryParameters);
        Task<PlaceFirstThoseAssociatedToARoleAllowsOdataQueryOptionsResponse> PlaceFirstThoseAssociatedToARoleAllowsOdataQueryOptions(PlaceFirstThoseAssociatedToARoleAllowsOdataQueryOptionsParameters queryParameters);
        Task<GetsRoleBasedOnItsIdResponse> GetsRoleBasedOnItsId(GetsRoleBasedOnItsIdParameters queryParameters);
        Task<Stream> EditsARole(EditsARoleRequest request);
        Task<Stream> DeletesARole();
        Task<Stream> RsWithAndDissociatesAnotherGroupOfUsersFromTheGivenRole(RsWithAndDissociatesAnotherGroupOfUsersFromTheGivenRoleRequest request);
        Task<GetsTheSessionsForTheCurrentFolderResponse> GetsTheSessionsForTheCurrentFolder(GetsTheSessionsForTheCurrentFolderParameters queryParameters);
        Task<Stream> DeletesDisconnectedOrUnresponsiveSessions(DeletesDisconnectedOrUnresponsiveSessionsRequest request);
        Task<GetsAllTheTenantSessionsResponse> GetsAllTheTenantSessions(GetsAllTheTenantSessionsParameters queryParameters);
        Task<GetsMachineRuntimeSessionsResponse> GetsMachineRuntimeSessions(GetsMachineRuntimeSessionsParameters queryParameters);
        Task<GetsMachineRuntimeSessionsByFolderIdResponse> GetsMachineRuntimeSessionsByFolderId(GetsMachineRuntimeSessionsByFolderIdParameters queryParameters);
        Task<GetSessionsForAMachineResponse> GetSessionsForAMachine(GetSessionsForAMachineParameters queryParameters);
        Task<GetsUsernames2Response> GetsUsernames2(GetsUsernames2Parameters queryParameters);
        Task<Stream> SetsTheExecutionCapabilitiesForASpecifiedHost(SetsTheExecutionCapabilitiesForASpecifiedHostRequest request);
        Task<Stream> TogglesTheDebugModeForTheSpecifiedMachineSession(TogglesTheDebugModeForTheSpecifiedMachineSessionRequest request);
        Task<GetsTheSettingsResponse> GetsTheSettings(GetsTheSettingsParameters queryParameters);
        Task<Stream> DeletesValuesForTheSpecifiedSettingsInTheTenantScope(DeletesValuesForTheSpecifiedSettingsInTheTenantScopeRequest request);
        Task<ReturnsOrchestratorSettingsUsedByActivitiesResponse> ReturnsOrchestratorSettingsUsedByActivities(ReturnsOrchestratorSettingsUsedByActivitiesParameters queryParameters);
        Task<GetsTheAuthenticationSettingsResponse> GetsTheAuthenticationSettings(GetsTheAuthenticationSettingsParameters queryParameters);
        Task<EtsCustomCalendarWithExcludedDatesInUTCForCurrentTenantResponse> EtsCustomCalendarWithExcludedDatesInUTCForCurrentTenant(EtsCustomCalendarWithExcludedDatesInUTCForCurrentTenantParameters queryParameters);
        Task<LtValuesWillBeTheActualValuesSetGloballyegResolutionWidResponse> LtValuesWillBeTheActualValuesSetGloballyegResolutionWid(LtValuesWillBeTheActualValuesSetGloballyegResolutionWidParameters queryParameters);
        Task<GetsSupportedLanguagesResponse> GetsSupportedLanguages(GetsSupportedLanguagesParameters queryParameters);
        Task<RetrievesTheCurrentLicenseInformationResponse> RetrievesTheCurrentLicenseInformation(RetrievesTheCurrentLicenseInformationParameters queryParameters);
        Task<GetsTheConfigurationFormatForASecureStoreResponse> GetsTheConfigurationFormatForASecureStore(GetsTheConfigurationFormatForASecureStoreParameters queryParameters);
        Task<GetsTimezonesResponse> GetsTimezones(GetsTimezonesParameters queryParameters);
        Task<GetsTheUpdateSettingsResponse> GetsTheUpdateSettings(GetsTheUpdateSettingsParameters queryParameters);
        Task<LuePairsRepresentingSettingsUsedByOrchestratorWebClientResponse> LuePairsRepresentingSettingsUsedByOrchestratorWebClient(LuePairsRepresentingSettingsUsedByOrchestratorWebClientParameters queryParameters);
        Task<Stream> EtsCustomCalendarWithExcludedDatesInUTCForCurrentTenant2(EtsCustomCalendarWithExcludedDatesInUTCForCurrentTenant2Request request);
        Task<Stream> UpdatesTheCurrentSettings(UpdatesTheCurrentSettingsRequest request);
        Task<Stream> EditsAUserSetting(EditsAUserSettingRequest request);
        Task<Stream> SMTPSettingsAreCorrectOrNotBySendingAnEmailToARecipient(SMTPSettingsAreCorrectOrNotBySendingAnEmailToARecipientRequest request);
        Task<GetsASettingsValueBasedOnItsKeyResponse> GetsASettingsValueBasedOnItsKey(GetsASettingsValueBasedOnItsKeyParameters queryParameters);
        Task<Stream> EditsASetting(EditsASettingRequest request);
        Task<GetsTaskActivitiesForATaskResponse> GetsTaskActivitiesForATask(GetsTaskActivitiesForATaskParameters queryParameters);
        Task<GetsTaskCatalogObjectsWithTheGivenODataQueriesResponse> GetsTaskCatalogObjectsWithTheGivenODataQueries(GetsTaskCatalogObjectsWithTheGivenODataQueriesParameters queryParameters);
        Task<CreatesANewTaskCatalogResponse> CreatesANewTaskCatalog(CreatesANewTaskCatalogParameters queryParameters, CreatesANewTaskCatalogRequest request);
        Task<UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders4Response> UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders4(UntOfFoldersWhereItIsSharedIncludingUnaccessibleFolders4Parameters queryParameters);
        Task<OneOf<ValidatesTaskCatalogDeletionRequestOKResponse, Stream>> ValidatesTaskCatalogDeletionRequest(ValidatesTaskCatalogDeletionRequestParameters queryParameters);
        Task<OssFoldersHavingGivenPermissionWithTheGivenODataQueriesResponse> OssFoldersHavingGivenPermissionWithTheGivenODataQueries(OssFoldersHavingGivenPermissionWithTheGivenODataQueriesParameters queryParameters);
        Task<Stream> MakesTheTaskCatalogsVisibleInTheSpecifiedFolders(MakesTheTaskCatalogsVisibleInTheSpecifiedFoldersRequest request);
        Task<OneOf<GetsATaskCatalogItemByIdOKResponse, Stream>> GetsATaskCatalogItemById(GetsATaskCatalogItemByIdParameters queryParameters);
        Task<Stream> DeletesTaskCatalog();
        Task<Stream> UpdatesTaskCatalog(UpdatesTaskCatalogRequest request);
        Task<GetsTaskDefinitionObjectsWithTheGivenODataQueriesResponse> GetsTaskDefinitionObjectsWithTheGivenODataQueries(GetsTaskDefinitionObjectsWithTheGivenODataQueriesParameters queryParameters);
        Task<CreatesANewTaskDefinitionResponse> CreatesANewTaskDefinition(CreatesANewTaskDefinitionParameters queryParameters, CreatesANewTaskDefinitionRequest request);
        Task<OneOf<GetAllVersionsOfTaskDefinitionOKResponse, Stream>> GetAllVersionsOfTaskDefinition(GetAllVersionsOfTaskDefinitionParameters queryParameters);
        Task<OneOf<GetsATaskDefinitionItemByIdOKResponse, Stream>> GetsATaskDefinitionItemById(GetsATaskDefinitionItemByIdParameters queryParameters);
        Task<Stream> DeletesTaskDefintionVersion(DeletesTaskDefintionVersionParameters queryParameters);
        Task<Stream> UpdatesTaskDefinition(UpdatesTaskDefinitionRequest request);
        Task<AddsATaskNoteResponse> AddsATaskNote(AddsATaskNoteParameters queryParameters, AddsATaskNoteRequest request);
        Task<GetsTaskNotesForATaskResponse> GetsTaskNotesForATask(GetsTaskNotesForATaskParameters queryParameters);
        Task<TaskRetentionGetResponse> TaskRetentionGet(TaskRetentionGetParameters queryParameters);
        Task<OneOf<TaskRetentionGetByIdOKResponse, Stream>> TaskRetentionGetById(TaskRetentionGetByIdParameters queryParameters);
        Task<Stream> TaskRetentionPutById(TaskRetentionPutByIdRequest request);
        Task<Stream> TaskRetentionDeleteById();
        Task<TsTaskObjectsFromClassicFoldersWithTheGivenODataQueriesResponse> TsTaskObjectsFromClassicFoldersWithTheGivenODataQueries(TsTaskObjectsFromClassicFoldersWithTheGivenODataQueriesParameters queryParameters);
        Task<AssignsTheTasksToGivenUsersResponse> AssignsTheTasksToGivenUsers(AssignsTheTasksToGivenUsersParameters queryParameters, AssignsTheTasksToGivenUsersRequest request);
        Task<DeletesTheTasksResponse> DeletesTheTasks(DeletesTheTasksParameters queryParameters, DeletesTheTasksRequest request);
        Task<Stream> EditsTheMetadataOfATask(EditsTheMetadataOfATaskRequest request);
        Task<OneOf<GetsATaskWithTheGivenGuidOKResponse, Stream>> GetsATaskWithTheGivenGuid(GetsATaskWithTheGivenGuidParameters queryParameters);
        Task<ElatedPermissionsForTheLoggedInUserOnTheFolderInSessionResponse> ElatedPermissionsForTheLoggedInUserOnTheFolderInSession(ElatedPermissionsForTheLoggedInUserOnTheFolderInSessionParameters queryParameters);
        Task<SsFoldersIncludingModernFoldersWithTheGivenODataQueriesResponse> SsFoldersIncludingModernFoldersWithTheGivenODataQueries(SsFoldersIncludingModernFoldersWithTheGivenODataQueriesParameters queryParameters);
        Task<SerHasTaskAdminPermissionsWithTheGivenODataQueryOptionsResponse> SerHasTaskAdminPermissionsWithTheGivenODataQueryOptions(SerHasTaskAdminPermissionsWithTheGivenODataQueryOptionsParameters queryParameters);
        Task<OrganizationUnitWhoHaveTasksViewAndTasksEditPermissionsResponse> OrganizationUnitWhoHaveTasksViewAndTasksEditPermissions(OrganizationUnitWhoHaveTasksViewAndTasksEditPermissionsParameters queryParameters);
        Task<ReassignsTheTasksToGivenUsersResponse> ReassignsTheTasksToGivenUsers(ReassignsTheTasksToGivenUsersParameters queryParameters, ReassignsTheTasksToGivenUsersRequest request);
        Task<UnassignsTheTasksFromTheUsersResponse> UnassignsTheTasksFromTheUsers(UnassignsTheTasksFromTheUsersParameters queryParameters, UnassignsTheTasksFromTheUsersRequest request);
        Task<OneOf<GetsATaskWithTheGivenPrimaryKeyOKResponse, Stream>> GetsATaskWithTheGivenPrimaryKey(GetsATaskWithTheGivenPrimaryKeyParameters queryParameters);
        Task<GetsTenantsResponse> GetsTenants(GetsTenantsParameters queryParameters);
        Task<GetsASingleTenantBasedOnItsIdResponse> GetsASingleTenantBasedOnItsId(GetsASingleTenantBasedOnItsIdParameters queryParameters);
        Task<ReturnsAListOfTestCaseDefinitionsResponse> ReturnsAListOfTestCaseDefinitions(ReturnsAListOfTestCaseDefinitionsParameters queryParameters);
        Task<ReturnsAListOfTestCaseExecutionsResponse> ReturnsAListOfTestCaseExecutions(ReturnsAListOfTestCaseExecutionsParameters queryParameters);
        Task<ReturnASpecificTestCaseExecutionIdentifiedByKeyResponse> ReturnASpecificTestCaseExecutionIdentifiedByKey(ReturnASpecificTestCaseExecutionIdentifiedByKeyParameters queryParameters);
        Task<ReturnAListOfTestDataQueueItemsResponse> ReturnAListOfTestDataQueueItems(ReturnAListOfTestDataQueueItemsParameters queryParameters);
        Task<ReturnASpecificTestDataQueueItemIdentifiedByKeyResponse> ReturnASpecificTestDataQueueItemIdentifiedByKey(ReturnASpecificTestDataQueueItemIdentifiedByKeyParameters queryParameters);
        Task<ReturnAListOfTestDataQueuesResponse> ReturnAListOfTestDataQueues(ReturnAListOfTestDataQueuesParameters queryParameters);
        Task<CreateANewTestDataQueueResponse> CreateANewTestDataQueue(CreateANewTestDataQueueRequest request);
        Task<ReturnASpecificTestDataQueueIdentifiedByKeyResponse> ReturnASpecificTestDataQueueIdentifiedByKey(ReturnASpecificTestDataQueueIdentifiedByKeyParameters queryParameters);
        Task<UpdateAnExistingTestDataQueueResponse> UpdateAnExistingTestDataQueue(UpdateAnExistingTestDataQueueRequest request);
        Task<Stream> DeleteAnExistingTestDataQueue();
        Task<AsTestSetExecutionsViewIfThereIsNoneWillReturnForbiddenResponse> AsTestSetExecutionsViewIfThereIsNoneWillReturnForbidden(AsTestSetExecutionsViewIfThereIsNoneWillReturnForbiddenParameters queryParameters);
        Task<ReturnASpecificTestSetExecutionIdentifiedByKeyResponse> ReturnASpecificTestSetExecutionIdentifiedByKey(ReturnASpecificTestSetExecutionIdentifiedByKeyParameters queryParameters);
        Task<RentUserHasTestSetsViewIfThereIsNoneWillReturnForbiddenResponse> RentUserHasTestSetsViewIfThereIsNoneWillReturnForbidden(RentUserHasTestSetsViewIfThereIsNoneWillReturnForbiddenParameters queryParameters);
        Task<CreatesANewTestSetResponse> CreatesANewTestSet(CreatesANewTestSetRequest request);
        Task<ReturnASpecificTestSetIdentifiedByKeyResponse> ReturnASpecificTestSetIdentifiedByKey(ReturnASpecificTestSetIdentifiedByKeyParameters queryParameters);
        Task<UpdateAnExistingTestSetResponse> UpdateAnExistingTestSet(UpdateAnExistingTestSetRequest request);
        Task<Stream> DeleteATestSet();
        Task<ReturnsAListOfTestSetExecutionSchedulesResponse> ReturnsAListOfTestSetExecutionSchedules(ReturnsAListOfTestSetExecutionSchedulesParameters queryParameters);
        Task<CreatesANewTestSetExecutionScheduleResponse> CreatesANewTestSetExecutionSchedule(CreatesANewTestSetExecutionScheduleRequest request);
        Task<EnablesDisablesAListOfTestSetExecutionSchedulesResponse> EnablesDisablesAListOfTestSetExecutionSchedules(EnablesDisablesAListOfTestSetExecutionSchedulesParameters queryParameters, EnablesDisablesAListOfTestSetExecutionSchedulesRequest request);
        Task<ReturnASpecificTestSetExecutionScheduleIdentifiedByKeyResponse> ReturnASpecificTestSetExecutionScheduleIdentifiedByKey(ReturnASpecificTestSetExecutionScheduleIdentifiedByKeyParameters queryParameters);
        Task<UpdateAnExistingTestSetExecutionScheduleResponse> UpdateAnExistingTestSetExecutionSchedule(UpdateAnExistingTestSetExecutionScheduleRequest request);
        Task<Stream> DeleteAnExistingTestSetExecutionSchedule();
        Task<GetsUsersResponse> GetsUsers(GetsUsersParameters queryParameters);
        Task<CreatesANewUserResponse> CreatesANewUser(CreatesANewUserRequest request);
        Task<Stream> ChangesTheCultureForTheCurrentUser(ChangesTheCultureForTheCurrentUserRequest request);
        Task<OneOf<TainingDataAboutTheCurrentUserAndAllThePermissionsItHasOKResponse, Stream>> TainingDataAboutTheCurrentUserAndAllThePermissionsItHas(TainingDataAboutTheCurrentUserAndAllThePermissionsItHasParameters queryParameters);
        Task<OneOf<TurnsDetailsAboutTheUserCurrentlyLoggedIntoOrchestratorOKResponse, Stream>> TurnsDetailsAboutTheUserCurrentlyLoggedIntoOrchestrator(TurnsDetailsAboutTheUserCurrentlyLoggedIntoOrchestratorParameters queryParameters);
        Task<ValidatesIfTheRobotsForTheGivenUsersAreBusyResponse> ValidatesIfTheRobotsForTheGivenUsersAreBusy(ValidatesIfTheRobotsForTheGivenUsersAreBusyParameters queryParameters);
        Task<GetsAUserBasedOnItsIdResponse> GetsAUserBasedOnItsId(GetsAUserBasedOnItsIdParameters queryParameters);
        Task<Stream> EditsAUser(EditsAUserRequest request);
        Task<Stream> UserCannotUpdateRolesOrOrganizationUnitsViaThisEndpoint(UserCannotUpdateRolesOrOrganizationUnitsViaThisEndpointRequest request);
        Task<Stream> DeletesAUser();
        Task<Stream> UsersAssignRolesById(UsersAssignRolesByIdRequest request);
        Task<Stream> ChangesTheCultureForTheSpecifiedUser(ChangesTheCultureForTheSpecifiedUserRequest request);
        Task<Stream> ActivateOrDeactivateAUser(ActivateOrDeactivateAUserRequest request);
        Task<Stream> SociatesTheGivenUserWithfromARoleBasedOnToggleParameter(SociatesTheGivenUserWithfromARoleBasedOnToggleParameterRequest request);
        Task<ListWebhooksResponse> ListWebhooks(ListWebhooksParameters queryParameters);
        Task<CreateANewWebhookSubscriptionResponse> CreateANewWebhookSubscription(CreateANewWebhookSubscriptionRequest request);
        Task<GetsTheListOfEventTypesAWebhookCanSubscribeToResponse> GetsTheListOfEventTypesAWebhookCanSubscribeTo(GetsTheListOfEventTypesAWebhookCanSubscribeToParameters queryParameters);
        Task<TriggersAnEventOfTypeCustomResponse> TriggersAnEventOfTypeCustom(TriggersAnEventOfTypeCustomParameters queryParameters, TriggersAnEventOfTypeCustomRequest request);
        Task<GetsASingleWebhookResponse> GetsASingleWebhook(GetsASingleWebhookParameters queryParameters);
        Task<UpdateAnExistingWebhookSubscriptionResponse> UpdateAnExistingWebhookSubscription(UpdateAnExistingWebhookSubscriptionRequest request);
        Task<PatchesAWebhookResponse> PatchesAWebhook(PatchesAWebhookRequest request);
        Task<Stream> DeleteAWebhookSubscription();
        Task<IntUsedForTestingConnectivityAndAvailabilityOfTargetURLResponse> IntUsedForTestingConnectivityAndAvailabilityOfTargetURL(IntUsedForTestingConnectivityAndAvailabilityOfTargetURLParameters queryParameters);
        Task<Stream> CompleteTheTaskBySavingAppTaskDataAndActionTaken(CompleteTheTaskBySavingAppTaskDataAndActionTakenRequest request);
        Task<OneOf<CreatesANewAppTaskCreatedResponse, Stream>> CreatesANewAppTask(CreatesANewAppTaskRequest request);
        Task<OneOf<ReturnsDtoToRenderAppTaskOKResponse, Stream>> ReturnsDtoToRenderAppTask(ReturnsDtoToRenderAppTaskParameters queryParameters);
        Task<OneOf<ReturnsDtoToRenderAppTask2OKResponse, Stream>> ReturnsDtoToRenderAppTask2(ReturnsDtoToRenderAppTask2Parameters queryParameters);
        Task<Stream> ChangesDoneByTheCurrentUserAndReassignTaskToAnotherUser2(ChangesDoneByTheCurrentUserAndReassignTaskToAnotherUser2Request request);
        Task<Stream> SaveTaskData2(SaveTaskData2Request request);
        Task<Stream> CompleteTheTaskBySavingTaskDataAndActionTaken(CompleteTheTaskBySavingTaskDataAndActionTakenRequest request);
        Task<CreatesANewGenericTaskResponse> CreatesANewGenericTask(CreatesANewGenericTaskRequest request);
        Task<OneOf<ReturnsTaskDataDto2OKResponse, Stream>> ReturnsTaskDataDto2(ReturnsTaskDataDto2Parameters queryParameters);
        Task<OneOf<ReturnsTaskDataDto3OKResponse, Stream>> ReturnsTaskDataDto3(ReturnsTaskDataDto3Parameters queryParameters);
        Task<Stream> ChangesDoneByTheCurrentUserAndReassignTaskToAnotherUser3(ChangesDoneByTheCurrentUserAndReassignTaskToAnotherUser3Request request);
        Task<Stream> SaveTaskData3(SaveTaskData3Request request);
        Task<Stream> SaveTagsForATask(SaveTagsForATaskRequest request);
    }
}